Nonterminals useless in grammar

    identifier_opt


Rules useless in grammar

   93 identifier_opt: ID
   94               | ε


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: ID
    2                   | INT_CONST
    3                   | CHAR_CONST
    4                   | STRING_CONST
    5                   | LPARAN expression RPARAN

    6 postfix_expression: primary_expression
    7                   | postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | postfix_expression ARROW ID

   10 argument_expression_list_opt: argument_expression_list
   11                             | ε

   12 argument_expression_list: assignment_expression
   13                         | argument_expression_list COMMA assignment_expression

   14 unary_expression: postfix_expression
   15                 | unary_operator unary_expression

   16 unary_operator: BIT_AND
   17               | MULT
   18               | PLUS
   19               | SUB
   20               | LOGICAL_NOT

   21 multiplicative_expression: unary_expression
   22                          | multiplicative_expression MULT unary_expression
   23                          | multiplicative_expression DIV unary_expression
   24                          | multiplicative_expression MOD unary_expression

   25 additive_expression: multiplicative_expression
   26                    | additive_expression PLUS multiplicative_expression
   27                    | additive_expression SUB multiplicative_expression

   28 relational_expression: additive_expression
   29                      | relational_expression LESS additive_expression
   30                      | relational_expression GREATER additive_expression
   31                      | relational_expression LESSEQ additive_expression
   32                      | relational_expression GREATEREQ additive_expression

   33 equality_expression: relational_expression
   34                    | equality_expression EQUALS relational_expression
   35                    | equality_expression NOTEQ relational_expression

   36 M: ε

   37 N: ε

   38 logical_AND_expression: equality_expression
   39                       | logical_AND_expression LOGICAL_AND M equality_expression

   40 logical_OR_expression: logical_AND_expression
   41                      | logical_OR_expression LOGICAL_OR M logical_AND_expression

   42 conditional_expression: logical_OR_expression
   43                       | logical_OR_expression N QUES M expression N COLON M conditional_expression

   44 assignment_expression: conditional_expression
   45                      | unary_expression ASSIGN assignment_expression

   46 expression: assignment_expression

   47 declaration: type_specifier init_declarator SEMICOLON

   48 init_declarator: declarator
   49                | declarator ASSIGN initialiser

   50 type_specifier: VOID
   51               | CHAR
   52               | INT

   53 declarator: pointer direct_declarator
   54           | direct_declarator

   55 change_scope_definition: ε

   56 change_scope_declaration: ε

   57 AUG1: ID

   58 direct_declarator: ID
   59                  | direct_declarator LSQBRACKET INT_CONST RSQBRACKET
   60                  | AUG1 LPARAN change_scope_declaration parameter_list RPARAN
   61                  | AUG1 LPARAN change_scope_declaration RPARAN

   62 pointer: MULT

   63 parameter_list: parameter_declaration
   64               | parameter_list COMMA parameter_declaration

   65 parameter_declaration: type_specifier declarator
   66                      | type_specifier

   67 initialiser: assignment_expression

   68 statement: compound_statement
   69          | expression_statement
   70          | selection_statement
   71          | iteration_statement
   72          | jump_statement

   73 change_block: ε

   74 compound_statement: LBRACE change_block change_scope_declaration block_item_list_opt RBRACE

   75 block_item_list_opt: block_item_list
   76                    | ε

   77 block_item_list: block_item
   78                | block_item_list M block_item

   79 block_item: declaration
   80           | statement

   81 expression_statement: expression_opt SEMICOLON

   82 expression_opt: expression
   83               | ε

   84 selection_statement: IF LPARAN expression N RPARAN M statement N
   85                    | IF LPARAN expression N RPARAN M statement N ELSE M statement

   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement

   87 jump_statement: RETURN expression_opt SEMICOLON

   88 translation_unit: temp_declaration
   89                 | translation_unit temp_declaration

   90 temp_declaration: function_definition
   91                 | declaration

   92 function_definition: type_specifier declarator change_scope_definition LBRACE block_item_list_opt RBRACE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    CHAR (258) 51
    ELSE (259) 85
    FOR (260) 86
    IF (261) 84 85
    INT (262) 52
    RETURN (263) 87
    VOID (264) 50
    LSQBRACKET (265) 7 59
    RSQBRACKET (266) 7 59
    LBRACE (267) 74 92
    RBRACE (268) 74 92
    LPARAN (269) 5 8 60 61 84 85 86
    RPARAN (270) 5 8 60 61 84 85 86
    ARROW (271) 9
    BIT_AND (272) 16
    PLUS (273) 18 26
    SUB (274) 19 27
    MULT (275) 17 22 62
    DIV (276) 23
    MOD (277) 24
    LOGICAL_NOT (278) 20
    LOGICAL_AND (279) 39
    LOGICAL_OR (280) 41
    LESS (281) 29
    GREATER (282) 30
    LESSEQ (283) 31
    GREATEREQ (284) 32
    EQUALS (285) 34
    NOTEQ (286) 35
    QUES (287) 43
    COLON (288) 43
    SEMICOLON (289) 47 81 86 87
    ASSIGN (290) 45 49
    COMMA (291) 13 64
    ID <symbol> (292) 1 9 57 58
    INT_CONST <intVal> (293) 2 59
    CHAR_CONST <charVal> (294) 3
    STRING_CONST <stringVal> (295) 4
    THEN (296)


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    primary_expression <expression> (43)
        on left: 1 2 3 4 5
        on right: 6
    postfix_expression <array> (44)
        on left: 6 7 8 9
        on right: 7 8 9 14
    argument_expression_list_opt <parameterCount> (45)
        on left: 10 11
        on right: 8
    argument_expression_list <parameterCount> (46)
        on left: 12 13
        on right: 10 13
    unary_expression <array> (47)
        on left: 14 15
        on right: 15 21 22 23 24 45
    unary_operator <unaryOperator> (48)
        on left: 16 17 18 19 20
        on right: 15
    multiplicative_expression <expression> (49)
        on left: 21 22 23 24
        on right: 22 23 24 25 26 27
    additive_expression <expression> (50)
        on left: 25 26 27
        on right: 26 27 28 29 30 31 32
    relational_expression <expression> (51)
        on left: 28 29 30 31 32
        on right: 29 30 31 32 33 34 35
    equality_expression <expression> (52)
        on left: 33 34 35
        on right: 34 35 38 39
    M <instructionNumber> (53)
        on left: 36
        on right: 39 41 43 78 84 85 86
    N <statement> (54)
        on left: 37
        on right: 43 84 85 86
    logical_AND_expression <expression> (55)
        on left: 38 39
        on right: 39 40 41
    logical_OR_expression <expression> (56)
        on left: 40 41
        on right: 41 42 43
    conditional_expression <expression> (57)
        on left: 42 43
        on right: 43 44
    assignment_expression <expression> (58)
        on left: 44 45
        on right: 12 13 45 46 67
    expression <expression> (59)
        on left: 46
        on right: 5 7 43 82 84 85
    declaration (60)
        on left: 47
        on right: 79 91
    init_declarator <symbol> (61)
        on left: 48 49
        on right: 47
    type_specifier (62)
        on left: 50 51 52
        on right: 47 65 66 92
    declarator <symbol> (63)
        on left: 53 54
        on right: 48 49 65 92
    change_scope_definition (64)
        on left: 55
        on right: 92
    change_scope_declaration (65)
        on left: 56
        on right: 60 61 74
    AUG1 <symbol> (66)
        on left: 57
        on right: 60 61
    direct_declarator <symbol> (67)
        on left: 58 59 60 61
        on right: 53 54 59
    pointer <symbolType> (68)
        on left: 62
        on right: 53
    parameter_list <parameterlist> (69)
        on left: 63 64
        on right: 60 64
    parameter_declaration <parameterlist> (70)
        on left: 65 66
        on right: 63 64
    initialiser <symbol> (71)
        on left: 67
        on right: 49
    statement <statement> (72)
        on left: 68 69 70 71 72
        on right: 80 84 85 86
    change_block (73)
        on left: 73
        on right: 74
    compound_statement <statement> (74)
        on left: 74
        on right: 68
    block_item_list_opt <statement> (75)
        on left: 75 76
        on right: 74 92
    block_item_list <statement> (76)
        on left: 77 78
        on right: 75 78
    block_item <statement> (77)
        on left: 79 80
        on right: 77 78
    expression_statement <expression> (78)
        on left: 81
        on right: 69
    expression_opt <expression> (79)
        on left: 82 83
        on right: 81 86 87
    selection_statement <statement> (80)
        on left: 84 85
        on right: 70
    iteration_statement <statement> (81)
        on left: 86
        on right: 71
    jump_statement <statement> (82)
        on left: 87
        on right: 72
    translation_unit (83)
        on left: 88 89
        on right: 0 89
    temp_declaration (84)
        on left: 90 91
        on right: 88 89
    function_definition (85)
        on left: 92
        on right: 90


State 0

    0 $accept: • translation_unit $end
   47 declaration: • type_specifier init_declarator SEMICOLON
   50 type_specifier: • VOID
   51               | • CHAR
   52               | • INT
   88 translation_unit: • temp_declaration
   89                 | • translation_unit temp_declaration
   90 temp_declaration: • function_definition
   91                 | • declaration
   92 function_definition: • type_specifier declarator change_scope_definition LBRACE block_item_list_opt RBRACE

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    declaration          go to state 4
    type_specifier       go to state 5
    translation_unit     go to state 6
    temp_declaration     go to state 7
    function_definition  go to state 8


State 1

   51 type_specifier: CHAR •

    $default  reduce using rule 51 (type_specifier)


State 2

   52 type_specifier: INT •

    $default  reduce using rule 52 (type_specifier)


State 3

   50 type_specifier: VOID •

    $default  reduce using rule 50 (type_specifier)


State 4

   91 temp_declaration: declaration •

    $default  reduce using rule 91 (temp_declaration)


State 5

   47 declaration: type_specifier • init_declarator SEMICOLON
   48 init_declarator: • declarator
   49                | • declarator ASSIGN initialiser
   53 declarator: • pointer direct_declarator
   54           | • direct_declarator
   57 AUG1: • ID
   58 direct_declarator: • ID
   59                  | • direct_declarator LSQBRACKET INT_CONST RSQBRACKET
   60                  | • AUG1 LPARAN change_scope_declaration parameter_list RPARAN
   61                  | • AUG1 LPARAN change_scope_declaration RPARAN
   62 pointer: • MULT
   92 function_definition: type_specifier • declarator change_scope_definition LBRACE block_item_list_opt RBRACE

    MULT  shift, and go to state 9
    ID    shift, and go to state 10

    init_declarator    go to state 11
    declarator         go to state 12
    AUG1               go to state 13
    direct_declarator  go to state 14
    pointer            go to state 15


State 6

    0 $accept: translation_unit • $end
   47 declaration: • type_specifier init_declarator SEMICOLON
   50 type_specifier: • VOID
   51               | • CHAR
   52               | • INT
   89 translation_unit: translation_unit • temp_declaration
   90 temp_declaration: • function_definition
   91                 | • declaration
   92 function_definition: • type_specifier declarator change_scope_definition LBRACE block_item_list_opt RBRACE

    $end  shift, and go to state 16
    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    declaration          go to state 4
    type_specifier       go to state 5
    temp_declaration     go to state 17
    function_definition  go to state 8


State 7

   88 translation_unit: temp_declaration •

    $default  reduce using rule 88 (translation_unit)


State 8

   90 temp_declaration: function_definition •

    $default  reduce using rule 90 (temp_declaration)


State 9

   62 pointer: MULT •

    $default  reduce using rule 62 (pointer)


State 10

   57 AUG1: ID •  [LPARAN]
   58 direct_declarator: ID •  [LSQBRACKET, LBRACE, RPARAN, SEMICOLON, ASSIGN, COMMA]

    LPARAN    reduce using rule 57 (AUG1)
    $default  reduce using rule 58 (direct_declarator)


State 11

   47 declaration: type_specifier init_declarator • SEMICOLON

    SEMICOLON  shift, and go to state 18


State 12

   48 init_declarator: declarator •  [SEMICOLON]
   49                | declarator • ASSIGN initialiser
   55 change_scope_definition: ε •  [LBRACE]
   92 function_definition: type_specifier declarator • change_scope_definition LBRACE block_item_list_opt RBRACE

    ASSIGN  shift, and go to state 19

    LBRACE    reduce using rule 55 (change_scope_definition)
    $default  reduce using rule 48 (init_declarator)

    change_scope_definition  go to state 20


State 13

   60 direct_declarator: AUG1 • LPARAN change_scope_declaration parameter_list RPARAN
   61                  | AUG1 • LPARAN change_scope_declaration RPARAN

    LPARAN  shift, and go to state 21


State 14

   54 declarator: direct_declarator •  [LBRACE, RPARAN, SEMICOLON, ASSIGN, COMMA]
   59 direct_declarator: direct_declarator • LSQBRACKET INT_CONST RSQBRACKET

    LSQBRACKET  shift, and go to state 22

    $default  reduce using rule 54 (declarator)


State 15

   53 declarator: pointer • direct_declarator
   57 AUG1: • ID
   58 direct_declarator: • ID
   59                  | • direct_declarator LSQBRACKET INT_CONST RSQBRACKET
   60                  | • AUG1 LPARAN change_scope_declaration parameter_list RPARAN
   61                  | • AUG1 LPARAN change_scope_declaration RPARAN

    ID  shift, and go to state 10

    AUG1               go to state 13
    direct_declarator  go to state 23


State 16

    0 $accept: translation_unit $end •

    $default  accept


State 17

   89 translation_unit: translation_unit temp_declaration •

    $default  reduce using rule 89 (translation_unit)


State 18

   47 declaration: type_specifier init_declarator SEMICOLON •

    $default  reduce using rule 47 (declaration)


State 19

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   49 init_declarator: declarator ASSIGN • initialiser
   67 initialiser: • assignment_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 45
    initialiser                go to state 46


State 20

   92 function_definition: type_specifier declarator change_scope_definition • LBRACE block_item_list_opt RBRACE

    LBRACE  shift, and go to state 47


State 21

   56 change_scope_declaration: ε •
   60 direct_declarator: AUG1 LPARAN • change_scope_declaration parameter_list RPARAN
   61                  | AUG1 LPARAN • change_scope_declaration RPARAN

    $default  reduce using rule 56 (change_scope_declaration)

    change_scope_declaration  go to state 48


State 22

   59 direct_declarator: direct_declarator LSQBRACKET • INT_CONST RSQBRACKET

    INT_CONST  shift, and go to state 49


State 23

   53 declarator: pointer direct_declarator •  [LBRACE, RPARAN, SEMICOLON, ASSIGN, COMMA]
   59 direct_declarator: direct_declarator • LSQBRACKET INT_CONST RSQBRACKET

    LSQBRACKET  shift, and go to state 22

    $default  reduce using rule 53 (declarator)


State 24

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    5                   | LPARAN • expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 51


State 25

   16 unary_operator: BIT_AND •

    $default  reduce using rule 16 (unary_operator)


State 26

   18 unary_operator: PLUS •

    $default  reduce using rule 18 (unary_operator)


State 27

   19 unary_operator: SUB •

    $default  reduce using rule 19 (unary_operator)


State 28

   17 unary_operator: MULT •

    $default  reduce using rule 17 (unary_operator)


State 29

   20 unary_operator: LOGICAL_NOT •

    $default  reduce using rule 20 (unary_operator)


State 30

    1 primary_expression: ID •

    $default  reduce using rule 1 (primary_expression)


State 31

    2 primary_expression: INT_CONST •

    $default  reduce using rule 2 (primary_expression)


State 32

    3 primary_expression: CHAR_CONST •

    $default  reduce using rule 3 (primary_expression)


State 33

    4 primary_expression: STRING_CONST •

    $default  reduce using rule 4 (primary_expression)


State 34

    6 postfix_expression: primary_expression •

    $default  reduce using rule 6 (postfix_expression)


State 35

    7 postfix_expression: postfix_expression • LSQBRACKET expression RSQBRACKET
    8                   | postfix_expression • LPARAN argument_expression_list_opt RPARAN
    9                   | postfix_expression • ARROW ID
   14 unary_expression: postfix_expression •  [RSQBRACKET, RPARAN, PLUS, SUB, MULT, DIV, MOD, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, ASSIGN, COMMA]

    LSQBRACKET  shift, and go to state 52
    LPARAN      shift, and go to state 53
    ARROW       shift, and go to state 54

    $default  reduce using rule 14 (unary_expression)


State 36

   21 multiplicative_expression: unary_expression •  [RSQBRACKET, RPARAN, PLUS, SUB, MULT, DIV, MOD, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]
   45 assignment_expression: unary_expression • ASSIGN assignment_expression

    ASSIGN  shift, and go to state 55

    $default  reduce using rule 21 (multiplicative_expression)


State 37

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   15                 | unary_operator • unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression  go to state 34
    postfix_expression  go to state 35
    unary_expression    go to state 56
    unary_operator      go to state 37


State 38

   22 multiplicative_expression: multiplicative_expression • MULT unary_expression
   23                          | multiplicative_expression • DIV unary_expression
   24                          | multiplicative_expression • MOD unary_expression
   25 additive_expression: multiplicative_expression •  [RSQBRACKET, RPARAN, PLUS, SUB, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    MULT  shift, and go to state 57
    DIV   shift, and go to state 58
    MOD   shift, and go to state 59

    $default  reduce using rule 25 (additive_expression)


State 39

   26 additive_expression: additive_expression • PLUS multiplicative_expression
   27                    | additive_expression • SUB multiplicative_expression
   28 relational_expression: additive_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    PLUS  shift, and go to state 60
    SUB   shift, and go to state 61

    $default  reduce using rule 28 (relational_expression)


State 40

   29 relational_expression: relational_expression • LESS additive_expression
   30                      | relational_expression • GREATER additive_expression
   31                      | relational_expression • LESSEQ additive_expression
   32                      | relational_expression • GREATEREQ additive_expression
   33 equality_expression: relational_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    LESS       shift, and go to state 62
    GREATER    shift, and go to state 63
    LESSEQ     shift, and go to state 64
    GREATEREQ  shift, and go to state 65

    $default  reduce using rule 33 (equality_expression)


State 41

   34 equality_expression: equality_expression • EQUALS relational_expression
   35                    | equality_expression • NOTEQ relational_expression
   38 logical_AND_expression: equality_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, QUES, COLON, SEMICOLON, COMMA]

    EQUALS  shift, and go to state 66
    NOTEQ   shift, and go to state 67

    $default  reduce using rule 38 (logical_AND_expression)


State 42

   39 logical_AND_expression: logical_AND_expression • LOGICAL_AND M equality_expression
   40 logical_OR_expression: logical_AND_expression •  [RSQBRACKET, RPARAN, LOGICAL_OR, QUES, COLON, SEMICOLON, COMMA]

    LOGICAL_AND  shift, and go to state 68

    $default  reduce using rule 40 (logical_OR_expression)


State 43

   37 N: ε •  [QUES]
   41 logical_OR_expression: logical_OR_expression • LOGICAL_OR M logical_AND_expression
   42 conditional_expression: logical_OR_expression •  [RSQBRACKET, RPARAN, COLON, SEMICOLON, COMMA]
   43                       | logical_OR_expression • N QUES M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 69

    QUES      reduce using rule 37 (N)
    $default  reduce using rule 42 (conditional_expression)

    N  go to state 70


State 44

   44 assignment_expression: conditional_expression •

    $default  reduce using rule 44 (assignment_expression)


State 45

   67 initialiser: assignment_expression •

    $default  reduce using rule 67 (initialiser)


State 46

   49 init_declarator: declarator ASSIGN initialiser •

    $default  reduce using rule 49 (init_declarator)


State 47

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   47 declaration: • type_specifier init_declarator SEMICOLON
   50 type_specifier: • VOID
   51               | • CHAR
   52               | • INT
   68 statement: • compound_statement
   69          | • expression_statement
   70          | • selection_statement
   71          | • iteration_statement
   72          | • jump_statement
   74 compound_statement: • LBRACE change_block change_scope_declaration block_item_list_opt RBRACE
   75 block_item_list_opt: • block_item_list
   76                    | ε •  [RBRACE]
   77 block_item_list: • block_item
   78                | • block_item_list M block_item
   79 block_item: • declaration
   80           | • statement
   81 expression_statement: • expression_opt SEMICOLON
   82 expression_opt: • expression
   83               | ε •  [SEMICOLON]
   84 selection_statement: • IF LPARAN expression N RPARAN M statement N
   85                    | • IF LPARAN expression N RPARAN M statement N ELSE M statement
   86 iteration_statement: • FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement
   87 jump_statement: • RETURN expression_opt SEMICOLON
   92 function_definition: type_specifier declarator change_scope_definition LBRACE • block_item_list_opt RBRACE

    CHAR          shift, and go to state 1
    FOR           shift, and go to state 71
    IF            shift, and go to state 72
    INT           shift, and go to state 2
    RETURN        shift, and go to state 73
    VOID          shift, and go to state 3
    LBRACE        shift, and go to state 74
    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    SEMICOLON  reduce using rule 83 (expression_opt)
    $default   reduce using rule 76 (block_item_list_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    declaration                go to state 76
    type_specifier             go to state 77
    statement                  go to state 78
    compound_statement         go to state 79
    block_item_list_opt        go to state 80
    block_item_list            go to state 81
    block_item                 go to state 82
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 48

   50 type_specifier: • VOID
   51               | • CHAR
   52               | • INT
   60 direct_declarator: AUG1 LPARAN change_scope_declaration • parameter_list RPARAN
   61                  | AUG1 LPARAN change_scope_declaration • RPARAN
   63 parameter_list: • parameter_declaration
   64               | • parameter_list COMMA parameter_declaration
   65 parameter_declaration: • type_specifier declarator
   66                      | • type_specifier

    CHAR    shift, and go to state 1
    INT     shift, and go to state 2
    VOID    shift, and go to state 3
    RPARAN  shift, and go to state 88

    type_specifier         go to state 89
    parameter_list         go to state 90
    parameter_declaration  go to state 91


State 49

   59 direct_declarator: direct_declarator LSQBRACKET INT_CONST • RSQBRACKET

    RSQBRACKET  shift, and go to state 92


State 50

   46 expression: assignment_expression •

    $default  reduce using rule 46 (expression)


State 51

    5 primary_expression: LPARAN expression • RPARAN

    RPARAN  shift, and go to state 93


State 52

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    7                   | postfix_expression LSQBRACKET • expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 94


State 53

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    8                   | postfix_expression LPARAN • argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   10 argument_expression_list_opt: • argument_expression_list
   11                             | ε •  [RPARAN]
   12 argument_expression_list: • assignment_expression
   13                         | • argument_expression_list COMMA assignment_expression
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    $default  reduce using rule 11 (argument_expression_list_opt)

    primary_expression            go to state 34
    postfix_expression            go to state 35
    argument_expression_list_opt  go to state 95
    argument_expression_list      go to state 96
    unary_expression              go to state 36
    unary_operator                go to state 37
    multiplicative_expression     go to state 38
    additive_expression           go to state 39
    relational_expression         go to state 40
    equality_expression           go to state 41
    logical_AND_expression        go to state 42
    logical_OR_expression         go to state 43
    conditional_expression        go to state 44
    assignment_expression         go to state 97


State 54

    9 postfix_expression: postfix_expression ARROW • ID

    ID  shift, and go to state 98


State 55

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   45                      | unary_expression ASSIGN • assignment_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 99


State 56

   15 unary_expression: unary_operator unary_expression •

    $default  reduce using rule 15 (unary_expression)


State 57

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   22 multiplicative_expression: multiplicative_expression MULT • unary_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression  go to state 34
    postfix_expression  go to state 35
    unary_expression    go to state 100
    unary_operator      go to state 37


State 58

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   23 multiplicative_expression: multiplicative_expression DIV • unary_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression  go to state 34
    postfix_expression  go to state 35
    unary_expression    go to state 101
    unary_operator      go to state 37


State 59

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   24 multiplicative_expression: multiplicative_expression MOD • unary_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression  go to state 34
    postfix_expression  go to state 35
    unary_expression    go to state 102
    unary_operator      go to state 37


State 60

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   26 additive_expression: additive_expression PLUS • multiplicative_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 104


State 61

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   27 additive_expression: additive_expression SUB • multiplicative_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 105


State 62

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   29 relational_expression: relational_expression LESS • additive_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 106


State 63

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   30 relational_expression: relational_expression GREATER • additive_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 107


State 64

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   31 relational_expression: relational_expression LESSEQ • additive_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 108


State 65

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   32 relational_expression: relational_expression GREATEREQ • additive_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 109


State 66

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   34 equality_expression: equality_expression EQUALS • relational_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 110


State 67

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   35 equality_expression: equality_expression NOTEQ • relational_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 111


State 68

   36 M: ε •
   39 logical_AND_expression: logical_AND_expression LOGICAL_AND • M equality_expression

    $default  reduce using rule 36 (M)

    M  go to state 112


State 69

   36 M: ε •
   41 logical_OR_expression: logical_OR_expression LOGICAL_OR • M logical_AND_expression

    $default  reduce using rule 36 (M)

    M  go to state 113


State 70

   43 conditional_expression: logical_OR_expression N • QUES M expression N COLON M conditional_expression

    QUES  shift, and go to state 114


State 71

   86 iteration_statement: FOR • LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement

    LPARAN  shift, and go to state 115


State 72

   84 selection_statement: IF • LPARAN expression N RPARAN M statement N
   85                    | IF • LPARAN expression N RPARAN M statement N ELSE M statement

    LPARAN  shift, and go to state 116


State 73

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   82 expression_opt: • expression
   83               | ε •  [SEMICOLON]
   87 jump_statement: RETURN • expression_opt SEMICOLON

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    $default  reduce using rule 83 (expression_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    expression_opt             go to state 117


State 74

   73 change_block: ε •
   74 compound_statement: LBRACE • change_block change_scope_declaration block_item_list_opt RBRACE

    $default  reduce using rule 73 (change_block)

    change_block  go to state 118


State 75

   82 expression_opt: expression •

    $default  reduce using rule 82 (expression_opt)


State 76

   79 block_item: declaration •

    $default  reduce using rule 79 (block_item)


State 77

   47 declaration: type_specifier • init_declarator SEMICOLON
   48 init_declarator: • declarator
   49                | • declarator ASSIGN initialiser
   53 declarator: • pointer direct_declarator
   54           | • direct_declarator
   57 AUG1: • ID
   58 direct_declarator: • ID
   59                  | • direct_declarator LSQBRACKET INT_CONST RSQBRACKET
   60                  | • AUG1 LPARAN change_scope_declaration parameter_list RPARAN
   61                  | • AUG1 LPARAN change_scope_declaration RPARAN
   62 pointer: • MULT

    MULT  shift, and go to state 9
    ID    shift, and go to state 10

    init_declarator    go to state 11
    declarator         go to state 119
    AUG1               go to state 13
    direct_declarator  go to state 14
    pointer            go to state 15


State 78

   80 block_item: statement •

    $default  reduce using rule 80 (block_item)


State 79

   68 statement: compound_statement •

    $default  reduce using rule 68 (statement)


State 80

   92 function_definition: type_specifier declarator change_scope_definition LBRACE block_item_list_opt • RBRACE

    RBRACE  shift, and go to state 120


State 81

   36 M: ε •  [CHAR, FOR, IF, INT, RETURN, VOID, LBRACE, LPARAN, BIT_AND, PLUS, SUB, MULT, LOGICAL_NOT, SEMICOLON, ID, INT_CONST, CHAR_CONST, STRING_CONST]
   75 block_item_list_opt: block_item_list •  [RBRACE]
   78 block_item_list: block_item_list • M block_item

    RBRACE    reduce using rule 75 (block_item_list_opt)
    $default  reduce using rule 36 (M)

    M  go to state 121


State 82

   77 block_item_list: block_item •

    $default  reduce using rule 77 (block_item_list)


State 83

   69 statement: expression_statement •

    $default  reduce using rule 69 (statement)


State 84

   81 expression_statement: expression_opt • SEMICOLON

    SEMICOLON  shift, and go to state 122


State 85

   70 statement: selection_statement •

    $default  reduce using rule 70 (statement)


State 86

   71 statement: iteration_statement •

    $default  reduce using rule 71 (statement)


State 87

   72 statement: jump_statement •

    $default  reduce using rule 72 (statement)


State 88

   61 direct_declarator: AUG1 LPARAN change_scope_declaration RPARAN •

    $default  reduce using rule 61 (direct_declarator)


State 89

   53 declarator: • pointer direct_declarator
   54           | • direct_declarator
   57 AUG1: • ID
   58 direct_declarator: • ID
   59                  | • direct_declarator LSQBRACKET INT_CONST RSQBRACKET
   60                  | • AUG1 LPARAN change_scope_declaration parameter_list RPARAN
   61                  | • AUG1 LPARAN change_scope_declaration RPARAN
   62 pointer: • MULT
   65 parameter_declaration: type_specifier • declarator
   66                      | type_specifier •  [RPARAN, COMMA]

    MULT  shift, and go to state 9
    ID    shift, and go to state 10

    $default  reduce using rule 66 (parameter_declaration)

    declarator         go to state 123
    AUG1               go to state 13
    direct_declarator  go to state 14
    pointer            go to state 15


State 90

   60 direct_declarator: AUG1 LPARAN change_scope_declaration parameter_list • RPARAN
   64 parameter_list: parameter_list • COMMA parameter_declaration

    RPARAN  shift, and go to state 124
    COMMA   shift, and go to state 125


State 91

   63 parameter_list: parameter_declaration •

    $default  reduce using rule 63 (parameter_list)


State 92

   59 direct_declarator: direct_declarator LSQBRACKET INT_CONST RSQBRACKET •

    $default  reduce using rule 59 (direct_declarator)


State 93

    5 primary_expression: LPARAN expression RPARAN •

    $default  reduce using rule 5 (primary_expression)


State 94

    7 postfix_expression: postfix_expression LSQBRACKET expression • RSQBRACKET

    RSQBRACKET  shift, and go to state 126


State 95

    8 postfix_expression: postfix_expression LPARAN argument_expression_list_opt • RPARAN

    RPARAN  shift, and go to state 127


State 96

   10 argument_expression_list_opt: argument_expression_list •  [RPARAN]
   13 argument_expression_list: argument_expression_list • COMMA assignment_expression

    COMMA  shift, and go to state 128

    $default  reduce using rule 10 (argument_expression_list_opt)


State 97

   12 argument_expression_list: assignment_expression •

    $default  reduce using rule 12 (argument_expression_list)


State 98

    9 postfix_expression: postfix_expression ARROW ID •

    $default  reduce using rule 9 (postfix_expression)


State 99

   45 assignment_expression: unary_expression ASSIGN assignment_expression •

    $default  reduce using rule 45 (assignment_expression)


State 100

   22 multiplicative_expression: multiplicative_expression MULT unary_expression •

    $default  reduce using rule 22 (multiplicative_expression)


State 101

   23 multiplicative_expression: multiplicative_expression DIV unary_expression •

    $default  reduce using rule 23 (multiplicative_expression)


State 102

   24 multiplicative_expression: multiplicative_expression MOD unary_expression •

    $default  reduce using rule 24 (multiplicative_expression)


State 103

   21 multiplicative_expression: unary_expression •

    $default  reduce using rule 21 (multiplicative_expression)


State 104

   22 multiplicative_expression: multiplicative_expression • MULT unary_expression
   23                          | multiplicative_expression • DIV unary_expression
   24                          | multiplicative_expression • MOD unary_expression
   26 additive_expression: additive_expression PLUS multiplicative_expression •  [RSQBRACKET, RPARAN, PLUS, SUB, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    MULT  shift, and go to state 57
    DIV   shift, and go to state 58
    MOD   shift, and go to state 59

    $default  reduce using rule 26 (additive_expression)


State 105

   22 multiplicative_expression: multiplicative_expression • MULT unary_expression
   23                          | multiplicative_expression • DIV unary_expression
   24                          | multiplicative_expression • MOD unary_expression
   27 additive_expression: additive_expression SUB multiplicative_expression •  [RSQBRACKET, RPARAN, PLUS, SUB, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    MULT  shift, and go to state 57
    DIV   shift, and go to state 58
    MOD   shift, and go to state 59

    $default  reduce using rule 27 (additive_expression)


State 106

   26 additive_expression: additive_expression • PLUS multiplicative_expression
   27                    | additive_expression • SUB multiplicative_expression
   29 relational_expression: relational_expression LESS additive_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    PLUS  shift, and go to state 60
    SUB   shift, and go to state 61

    $default  reduce using rule 29 (relational_expression)


State 107

   26 additive_expression: additive_expression • PLUS multiplicative_expression
   27                    | additive_expression • SUB multiplicative_expression
   30 relational_expression: relational_expression GREATER additive_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    PLUS  shift, and go to state 60
    SUB   shift, and go to state 61

    $default  reduce using rule 30 (relational_expression)


State 108

   26 additive_expression: additive_expression • PLUS multiplicative_expression
   27                    | additive_expression • SUB multiplicative_expression
   31 relational_expression: relational_expression LESSEQ additive_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    PLUS  shift, and go to state 60
    SUB   shift, and go to state 61

    $default  reduce using rule 31 (relational_expression)


State 109

   26 additive_expression: additive_expression • PLUS multiplicative_expression
   27                    | additive_expression • SUB multiplicative_expression
   32 relational_expression: relational_expression GREATEREQ additive_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    PLUS  shift, and go to state 60
    SUB   shift, and go to state 61

    $default  reduce using rule 32 (relational_expression)


State 110

   29 relational_expression: relational_expression • LESS additive_expression
   30                      | relational_expression • GREATER additive_expression
   31                      | relational_expression • LESSEQ additive_expression
   32                      | relational_expression • GREATEREQ additive_expression
   34 equality_expression: equality_expression EQUALS relational_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    LESS       shift, and go to state 62
    GREATER    shift, and go to state 63
    LESSEQ     shift, and go to state 64
    GREATEREQ  shift, and go to state 65

    $default  reduce using rule 34 (equality_expression)


State 111

   29 relational_expression: relational_expression • LESS additive_expression
   30                      | relational_expression • GREATER additive_expression
   31                      | relational_expression • LESSEQ additive_expression
   32                      | relational_expression • GREATEREQ additive_expression
   35 equality_expression: equality_expression NOTEQ relational_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, EQUALS, NOTEQ, QUES, COLON, SEMICOLON, COMMA]

    LESS       shift, and go to state 62
    GREATER    shift, and go to state 63
    LESSEQ     shift, and go to state 64
    GREATEREQ  shift, and go to state 65

    $default  reduce using rule 35 (equality_expression)


State 112

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   39 logical_AND_expression: logical_AND_expression LOGICAL_AND M • equality_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 129


State 113

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   41 logical_OR_expression: logical_OR_expression LOGICAL_OR M • logical_AND_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 130


State 114

   36 M: ε •
   43 conditional_expression: logical_OR_expression N QUES • M expression N COLON M conditional_expression

    $default  reduce using rule 36 (M)

    M  go to state 131


State 115

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   82 expression_opt: • expression
   83               | ε •  [SEMICOLON]
   86 iteration_statement: FOR LPARAN • expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    $default  reduce using rule 83 (expression_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    expression_opt             go to state 132


State 116

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   84 selection_statement: IF LPARAN • expression N RPARAN M statement N
   85                    | IF LPARAN • expression N RPARAN M statement N ELSE M statement

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 133


State 117

   87 jump_statement: RETURN expression_opt • SEMICOLON

    SEMICOLON  shift, and go to state 134


State 118

   56 change_scope_declaration: ε •
   74 compound_statement: LBRACE change_block • change_scope_declaration block_item_list_opt RBRACE

    $default  reduce using rule 56 (change_scope_declaration)

    change_scope_declaration  go to state 135


State 119

   48 init_declarator: declarator •  [SEMICOLON]
   49                | declarator • ASSIGN initialiser

    ASSIGN  shift, and go to state 19

    $default  reduce using rule 48 (init_declarator)


State 120

   92 function_definition: type_specifier declarator change_scope_definition LBRACE block_item_list_opt RBRACE •

    $default  reduce using rule 92 (function_definition)


State 121

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   47 declaration: • type_specifier init_declarator SEMICOLON
   50 type_specifier: • VOID
   51               | • CHAR
   52               | • INT
   68 statement: • compound_statement
   69          | • expression_statement
   70          | • selection_statement
   71          | • iteration_statement
   72          | • jump_statement
   74 compound_statement: • LBRACE change_block change_scope_declaration block_item_list_opt RBRACE
   78 block_item_list: block_item_list M • block_item
   79 block_item: • declaration
   80           | • statement
   81 expression_statement: • expression_opt SEMICOLON
   82 expression_opt: • expression
   83               | ε •  [SEMICOLON]
   84 selection_statement: • IF LPARAN expression N RPARAN M statement N
   85                    | • IF LPARAN expression N RPARAN M statement N ELSE M statement
   86 iteration_statement: • FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement
   87 jump_statement: • RETURN expression_opt SEMICOLON

    CHAR          shift, and go to state 1
    FOR           shift, and go to state 71
    IF            shift, and go to state 72
    INT           shift, and go to state 2
    RETURN        shift, and go to state 73
    VOID          shift, and go to state 3
    LBRACE        shift, and go to state 74
    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    $default  reduce using rule 83 (expression_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    declaration                go to state 76
    type_specifier             go to state 77
    statement                  go to state 78
    compound_statement         go to state 79
    block_item                 go to state 136
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 122

   81 expression_statement: expression_opt SEMICOLON •

    $default  reduce using rule 81 (expression_statement)


State 123

   65 parameter_declaration: type_specifier declarator •

    $default  reduce using rule 65 (parameter_declaration)


State 124

   60 direct_declarator: AUG1 LPARAN change_scope_declaration parameter_list RPARAN •

    $default  reduce using rule 60 (direct_declarator)


State 125

   50 type_specifier: • VOID
   51               | • CHAR
   52               | • INT
   64 parameter_list: parameter_list COMMA • parameter_declaration
   65 parameter_declaration: • type_specifier declarator
   66                      | • type_specifier

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    type_specifier         go to state 89
    parameter_declaration  go to state 137


State 126

    7 postfix_expression: postfix_expression LSQBRACKET expression RSQBRACKET •

    $default  reduce using rule 7 (postfix_expression)


State 127

    8 postfix_expression: postfix_expression LPARAN argument_expression_list_opt RPARAN •

    $default  reduce using rule 8 (postfix_expression)


State 128

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   13 argument_expression_list: argument_expression_list COMMA • assignment_expression
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 138


State 129

   34 equality_expression: equality_expression • EQUALS relational_expression
   35                    | equality_expression • NOTEQ relational_expression
   39 logical_AND_expression: logical_AND_expression LOGICAL_AND M equality_expression •  [RSQBRACKET, RPARAN, LOGICAL_AND, LOGICAL_OR, QUES, COLON, SEMICOLON, COMMA]

    EQUALS  shift, and go to state 66
    NOTEQ   shift, and go to state 67

    $default  reduce using rule 39 (logical_AND_expression)


State 130

   39 logical_AND_expression: logical_AND_expression • LOGICAL_AND M equality_expression
   41 logical_OR_expression: logical_OR_expression LOGICAL_OR M logical_AND_expression •  [RSQBRACKET, RPARAN, LOGICAL_OR, QUES, COLON, SEMICOLON, COMMA]

    LOGICAL_AND  shift, and go to state 68

    $default  reduce using rule 41 (logical_OR_expression)


State 131

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   43                       | logical_OR_expression N QUES M • expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 139


State 132

   86 iteration_statement: FOR LPARAN expression_opt • SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement

    SEMICOLON  shift, and go to state 140


State 133

   37 N: ε •
   84 selection_statement: IF LPARAN expression • N RPARAN M statement N
   85                    | IF LPARAN expression • N RPARAN M statement N ELSE M statement

    $default  reduce using rule 37 (N)

    N  go to state 141


State 134

   87 jump_statement: RETURN expression_opt SEMICOLON •

    $default  reduce using rule 87 (jump_statement)


State 135

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   47 declaration: • type_specifier init_declarator SEMICOLON
   50 type_specifier: • VOID
   51               | • CHAR
   52               | • INT
   68 statement: • compound_statement
   69          | • expression_statement
   70          | • selection_statement
   71          | • iteration_statement
   72          | • jump_statement
   74 compound_statement: • LBRACE change_block change_scope_declaration block_item_list_opt RBRACE
   74                   | LBRACE change_block change_scope_declaration • block_item_list_opt RBRACE
   75 block_item_list_opt: • block_item_list
   76                    | ε •  [RBRACE]
   77 block_item_list: • block_item
   78                | • block_item_list M block_item
   79 block_item: • declaration
   80           | • statement
   81 expression_statement: • expression_opt SEMICOLON
   82 expression_opt: • expression
   83               | ε •  [SEMICOLON]
   84 selection_statement: • IF LPARAN expression N RPARAN M statement N
   85                    | • IF LPARAN expression N RPARAN M statement N ELSE M statement
   86 iteration_statement: • FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement
   87 jump_statement: • RETURN expression_opt SEMICOLON

    CHAR          shift, and go to state 1
    FOR           shift, and go to state 71
    IF            shift, and go to state 72
    INT           shift, and go to state 2
    RETURN        shift, and go to state 73
    VOID          shift, and go to state 3
    LBRACE        shift, and go to state 74
    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    SEMICOLON  reduce using rule 83 (expression_opt)
    $default   reduce using rule 76 (block_item_list_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    declaration                go to state 76
    type_specifier             go to state 77
    statement                  go to state 78
    compound_statement         go to state 79
    block_item_list_opt        go to state 142
    block_item_list            go to state 81
    block_item                 go to state 82
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 136

   78 block_item_list: block_item_list M block_item •

    $default  reduce using rule 78 (block_item_list)


State 137

   64 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 64 (parameter_list)


State 138

   13 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 13 (argument_expression_list)


State 139

   37 N: ε •
   43 conditional_expression: logical_OR_expression N QUES M expression • N COLON M conditional_expression

    $default  reduce using rule 37 (N)

    N  go to state 143


State 140

   36 M: ε •
   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON • M expression_opt SEMICOLON M expression_opt N RPARAN M statement

    $default  reduce using rule 36 (M)

    M  go to state 144


State 141

   84 selection_statement: IF LPARAN expression N • RPARAN M statement N
   85                    | IF LPARAN expression N • RPARAN M statement N ELSE M statement

    RPARAN  shift, and go to state 145


State 142

   74 compound_statement: LBRACE change_block change_scope_declaration block_item_list_opt • RBRACE

    RBRACE  shift, and go to state 146


State 143

   43 conditional_expression: logical_OR_expression N QUES M expression N • COLON M conditional_expression

    COLON  shift, and go to state 147


State 144

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   82 expression_opt: • expression
   83               | ε •  [SEMICOLON]
   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON M • expression_opt SEMICOLON M expression_opt N RPARAN M statement

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    $default  reduce using rule 83 (expression_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    expression_opt             go to state 148


State 145

   36 M: ε •
   84 selection_statement: IF LPARAN expression N RPARAN • M statement N
   85                    | IF LPARAN expression N RPARAN • M statement N ELSE M statement

    $default  reduce using rule 36 (M)

    M  go to state 149


State 146

   74 compound_statement: LBRACE change_block change_scope_declaration block_item_list_opt RBRACE •

    $default  reduce using rule 74 (compound_statement)


State 147

   36 M: ε •
   43 conditional_expression: logical_OR_expression N QUES M expression N COLON • M conditional_expression

    $default  reduce using rule 36 (M)

    M  go to state 150


State 148

   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON M expression_opt • SEMICOLON M expression_opt N RPARAN M statement

    SEMICOLON  shift, and go to state 151


State 149

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   68 statement: • compound_statement
   69          | • expression_statement
   70          | • selection_statement
   71          | • iteration_statement
   72          | • jump_statement
   74 compound_statement: • LBRACE change_block change_scope_declaration block_item_list_opt RBRACE
   81 expression_statement: • expression_opt SEMICOLON
   82 expression_opt: • expression
   83               | ε •  [SEMICOLON]
   84 selection_statement: • IF LPARAN expression N RPARAN M statement N
   84                    | IF LPARAN expression N RPARAN M • statement N
   85                    | • IF LPARAN expression N RPARAN M statement N ELSE M statement
   85                    | IF LPARAN expression N RPARAN M • statement N ELSE M statement
   86 iteration_statement: • FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement
   87 jump_statement: • RETURN expression_opt SEMICOLON

    FOR           shift, and go to state 71
    IF            shift, and go to state 72
    RETURN        shift, and go to state 73
    LBRACE        shift, and go to state 74
    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    $default  reduce using rule 83 (expression_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    statement                  go to state 152
    compound_statement         go to state 79
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 150

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   43                       | logical_OR_expression N QUES M expression N COLON M • conditional_expression

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 103
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 153


State 151

   36 M: ε •
   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON • M expression_opt N RPARAN M statement

    $default  reduce using rule 36 (M)

    M  go to state 154


State 152

   37 N: ε •
   84 selection_statement: IF LPARAN expression N RPARAN M statement • N
   85                    | IF LPARAN expression N RPARAN M statement • N ELSE M statement

    $default  reduce using rule 37 (N)

    N  go to state 155


State 153

   43 conditional_expression: logical_OR_expression N QUES M expression N COLON M conditional_expression •

    $default  reduce using rule 43 (conditional_expression)


State 154

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   82 expression_opt: • expression
   83               | ε •  [RPARAN]
   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M • expression_opt N RPARAN M statement

    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    $default  reduce using rule 83 (expression_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    expression_opt             go to state 156


State 155

   84 selection_statement: IF LPARAN expression N RPARAN M statement N •  [CHAR, FOR, IF, INT, RETURN, VOID, LBRACE, RBRACE, LPARAN, BIT_AND, PLUS, SUB, MULT, LOGICAL_NOT, SEMICOLON, ID, INT_CONST, CHAR_CONST, STRING_CONST]
   85                    | IF LPARAN expression N RPARAN M statement N • ELSE M statement

    ELSE  shift, and go to state 157

    $default  reduce using rule 84 (selection_statement)

    Conflict between rule 84 and token ELSE resolved as shift (%right ELSE).


State 156

   37 N: ε •
   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt • N RPARAN M statement

    $default  reduce using rule 37 (N)

    N  go to state 158


State 157

   36 M: ε •
   85 selection_statement: IF LPARAN expression N RPARAN M statement N ELSE • M statement

    $default  reduce using rule 36 (M)

    M  go to state 159


State 158

   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N • RPARAN M statement

    RPARAN  shift, and go to state 160


State 159

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   68 statement: • compound_statement
   69          | • expression_statement
   70          | • selection_statement
   71          | • iteration_statement
   72          | • jump_statement
   74 compound_statement: • LBRACE change_block change_scope_declaration block_item_list_opt RBRACE
   81 expression_statement: • expression_opt SEMICOLON
   82 expression_opt: • expression
   83               | ε •  [SEMICOLON]
   84 selection_statement: • IF LPARAN expression N RPARAN M statement N
   85                    | • IF LPARAN expression N RPARAN M statement N ELSE M statement
   85                    | IF LPARAN expression N RPARAN M statement N ELSE M • statement
   86 iteration_statement: • FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement
   87 jump_statement: • RETURN expression_opt SEMICOLON

    FOR           shift, and go to state 71
    IF            shift, and go to state 72
    RETURN        shift, and go to state 73
    LBRACE        shift, and go to state 74
    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    $default  reduce using rule 83 (expression_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    statement                  go to state 161
    compound_statement         go to state 79
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 160

   36 M: ε •
   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN • M statement

    $default  reduce using rule 36 (M)

    M  go to state 162


State 161

   85 selection_statement: IF LPARAN expression N RPARAN M statement N ELSE M statement •

    $default  reduce using rule 85 (selection_statement)


State 162

    1 primary_expression: • ID
    2                   | • INT_CONST
    3                   | • CHAR_CONST
    4                   | • STRING_CONST
    5                   | • LPARAN expression RPARAN
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | • postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | • postfix_expression ARROW ID
   14 unary_expression: • postfix_expression
   15                 | • unary_operator unary_expression
   16 unary_operator: • BIT_AND
   17               | • MULT
   18               | • PLUS
   19               | • SUB
   20               | • LOGICAL_NOT
   21 multiplicative_expression: • unary_expression
   22                          | • multiplicative_expression MULT unary_expression
   23                          | • multiplicative_expression DIV unary_expression
   24                          | • multiplicative_expression MOD unary_expression
   25 additive_expression: • multiplicative_expression
   26                    | • additive_expression PLUS multiplicative_expression
   27                    | • additive_expression SUB multiplicative_expression
   28 relational_expression: • additive_expression
   29                      | • relational_expression LESS additive_expression
   30                      | • relational_expression GREATER additive_expression
   31                      | • relational_expression LESSEQ additive_expression
   32                      | • relational_expression GREATEREQ additive_expression
   33 equality_expression: • relational_expression
   34                    | • equality_expression EQUALS relational_expression
   35                    | • equality_expression NOTEQ relational_expression
   38 logical_AND_expression: • equality_expression
   39                       | • logical_AND_expression LOGICAL_AND M equality_expression
   40 logical_OR_expression: • logical_AND_expression
   41                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   42 conditional_expression: • logical_OR_expression
   43                       | • logical_OR_expression N QUES M expression N COLON M conditional_expression
   44 assignment_expression: • conditional_expression
   45                      | • unary_expression ASSIGN assignment_expression
   46 expression: • assignment_expression
   68 statement: • compound_statement
   69          | • expression_statement
   70          | • selection_statement
   71          | • iteration_statement
   72          | • jump_statement
   74 compound_statement: • LBRACE change_block change_scope_declaration block_item_list_opt RBRACE
   81 expression_statement: • expression_opt SEMICOLON
   82 expression_opt: • expression
   83               | ε •  [SEMICOLON]
   84 selection_statement: • IF LPARAN expression N RPARAN M statement N
   85                    | • IF LPARAN expression N RPARAN M statement N ELSE M statement
   86 iteration_statement: • FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement
   86                    | FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M • statement
   87 jump_statement: • RETURN expression_opt SEMICOLON

    FOR           shift, and go to state 71
    IF            shift, and go to state 72
    RETURN        shift, and go to state 73
    LBRACE        shift, and go to state 74
    LPARAN        shift, and go to state 24
    BIT_AND       shift, and go to state 25
    PLUS          shift, and go to state 26
    SUB           shift, and go to state 27
    MULT          shift, and go to state 28
    LOGICAL_NOT   shift, and go to state 29
    ID            shift, and go to state 30
    INT_CONST     shift, and go to state 31
    CHAR_CONST    shift, and go to state 32
    STRING_CONST  shift, and go to state 33

    $default  reduce using rule 83 (expression_opt)

    primary_expression         go to state 34
    postfix_expression         go to state 35
    unary_expression           go to state 36
    unary_operator             go to state 37
    multiplicative_expression  go to state 38
    additive_expression        go to state 39
    relational_expression      go to state 40
    equality_expression        go to state 41
    logical_AND_expression     go to state 42
    logical_OR_expression      go to state 43
    conditional_expression     go to state 44
    assignment_expression      go to state 50
    expression                 go to state 75
    statement                  go to state 163
    compound_statement         go to state 79
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 163

   86 iteration_statement: FOR LPARAN expression_opt SEMICOLON M expression_opt SEMICOLON M expression_opt N RPARAN M statement •

    $default  reduce using rule 86 (iteration_statement)
